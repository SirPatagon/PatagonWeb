<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutText" xml:space="preserve">
    <value>Willkommen auf meiner Webseite!&lt;br&gt;
Ich bin Softwareentwickler und komme aus Osnabrück. Ich setze mich hauptsächlich mit Web-Technologien und Oberflächengestaltung auseinander.&lt;br&gt;
Während der Entwicklung von Software versuche ich primär auf die User Experience zu achten. Ich stelle mir dabei die Frage: „Würde ich &lt;i&gt;persönlich&lt;/i&gt; mit dieser Oberfläche zurechtkommen und dieses Programm/diese Webseite gerne verwenden?“.&lt;br&gt;
Ist die Antwort darauf „Nein“, überarbeite ich die Oberfläche so lange bis es ein klares „Ja“ ist.&lt;br&gt;
Aktuell arbeite ich an einem größeren Projekt: Ein eigenes &lt;a href="https://de.wikipedia.org/wiki/Content-Management-System" target="_blank" rel="noreferrer"&gt;CMS&lt;/a&gt; namens &lt;a href="https://github.com/SirPatagon/Puzzle"&gt;Puzzle&lt;/a&gt;.</value>
  </data>
  <data name="AboutTitle" xml:space="preserve">
    <value>Über mich</value>
  </data>
  <data name="ArrowText" xml:space="preserve">
    <value>Mehr</value>
  </data>
  <data name="FeedSubTitle" xml:space="preserve">
    <value>GitHub/GitLab Aktivität</value>
  </data>
  <data name="HomeTitle" xml:space="preserve">
    <value>Startseite</value>
  </data>
  <data name="LanguageBad" xml:space="preserve">
    <value>Schlecht</value>
  </data>
  <data name="LanguageEnglish" xml:space="preserve">
    <value>Englisch</value>
  </data>
  <data name="LanguageGerman" xml:space="preserve">
    <value>Deutsch</value>
  </data>
  <data name="LanguageGood" xml:space="preserve">
    <value>Gut</value>
  </data>
  <data name="LanguageIntermediate" xml:space="preserve">
    <value>Mittel</value>
  </data>
  <data name="LanguageJapanese" xml:space="preserve">
    <value>Japanisch</value>
  </data>
  <data name="LanguagePerfect" xml:space="preserve">
    <value>Hervorragend</value>
  </data>
  <data name="LanguagesSubTitle" xml:space="preserve">
    <value>Sprachen</value>
  </data>
  <data name="LanguageVeryGood" xml:space="preserve">
    <value>Sehr Gut</value>
  </data>
  <data name="PageDescription" xml:space="preserve">
    <value>Ich bin Softwareentwickler aus Osnabrück und setze mich hauptsächlich mit Web-Technologien und Oberflächengestaltung auseinander.</value>
  </data>
  <data name="ProjectsTitle" xml:space="preserve">
    <value>Projekte</value>
  </data>
  <data name="TechnologiesSubTitle" xml:space="preserve">
    <value>Einige Technologien mit denen ich arbeite</value>
  </data>
  <data name="TechnologyCaddy" xml:space="preserve">
    <value>Seit mir ein Arbeitskollege diesen Webserver gezeigt hat, nutze ich nur noch Caddy für meine Webseiten. Caddy ist einfach zu konfigurieren und besorgt automatisch SSL-Zertifikate. Seit Version 2 ist die Konfiguration etwas komplizierter, aber meiner Meinung nach immernoch einfacher als bei nginx oder Apache.</value>
  </data>
  <data name="TechnologyDocker" xml:space="preserve">
    <value>Ich nutze zur Verwaltung meiner Server-Anwendungen gerne Docker, weil es jede Anwendung in einem Container für sich isoliert und so verhindert, dass sie sich tief in das Betriebssystem eingräbt. So kann man alle Anwendungen von einem zentralen Punkt aus steuern und auch wieder restlos entfernen.</value>
  </data>
  <data name="TechnologyNET" xml:space="preserve">
    <value>Mit dem .NET Framework programmiere ich die meisten meiner Anwendungen, da ich auf der Arbeit viel damit zu tun habe und mich deshalb gut damit auskenne.</value>
  </data>
  <data name="TechnologyVue" xml:space="preserve">
    <value>Vue.js ist mittlerweile mein lieblings JavaScript Framework, da es mir erlaubt meine Webanwendungen modular und nach dem MVVM Pattern aufzubauen.</value>
  </data>
</root>
