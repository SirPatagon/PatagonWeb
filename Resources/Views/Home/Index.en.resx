<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutText" xml:space="preserve">
    <value>Welcome to my Website!&lt;br&gt;
I am a software developer from Osnabrück, Germany. I specialize on web technologies and user interface design.&lt;br&gt;
When developing software I lay my focus primarily on the user experience. I ask myself: "Would I be able to use this user interface without problems? Would &lt;i&gt;I&lt;/i&gt; want to use this program/this website?".&lt;br&gt;
If the answer to that is "No", I will continue to refactor it until I can answer both of my questions with a clear "Yes".&lt;br&gt;
Currently I work on a bigger project: My own &lt;a href="https://en.wikipedia.org/wiki/Content_management_system" target="_blank" rel="noreferrer"&gt;CMS&lt;/a&gt; named &lt;a href="https://github.com/SirPatagon/Puzzle"&gt;Puzzle&lt;/a&gt;.</value>
  </data>
  <data name="AboutTitle" xml:space="preserve">
    <value>About me</value>
  </data>
  <data name="ArrowText" xml:space="preserve">
    <value>More</value>
  </data>
  <data name="FeedSubTitle" xml:space="preserve">
    <value>GitHub/GitLab Activity</value>
  </data>
  <data name="HomeTitle" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="LanguageBad" xml:space="preserve">
    <value>Bad</value>
  </data>
  <data name="LanguageEnglish" xml:space="preserve">
    <value>English</value>
  </data>
  <data name="LanguageGerman" xml:space="preserve">
    <value>German</value>
  </data>
  <data name="LanguageGood" xml:space="preserve">
    <value>Good</value>
  </data>
  <data name="LanguageIntermediate" xml:space="preserve">
    <value>Intermediate</value>
  </data>
  <data name="LanguageJapanese" xml:space="preserve">
    <value>Japanese</value>
  </data>
  <data name="LanguagePerfect" xml:space="preserve">
    <value>Perfect</value>
  </data>
  <data name="LanguagesSubTitle" xml:space="preserve">
    <value>Languages</value>
  </data>
  <data name="LanguageVeryGood" xml:space="preserve">
    <value>Very Good</value>
  </data>
  <data name="PageDescription" xml:space="preserve">
    <value>I am a software developer from Osnabrück, Germany. I specialize on web technologies and user interface design.</value>
  </data>
  <data name="ProjectsTitle" xml:space="preserve">
    <value>Projects</value>
  </data>
  <data name="TechnologiesSubTitle" xml:space="preserve">
    <value>Some of the technologies I work with</value>
  </data>
  <data name="TechnologyCaddy" xml:space="preserve">
    <value>Ever since a colleague from work recommended it to me, I only use Caddy to host my websites. It is easy to configure and gets SSL-Certificates for you automatically. Since version 2 came out configuration got a bit more complex, but over all I think it is still easier than nginx or Apache.</value>
  </data>
  <data name="TechnologyDocker" xml:space="preserve">
    <value>I like to use Docker for managing my server applications, because when every application is locked in a container, they won't be able to deeply invade the operating system. With Docker I can control all applications from one central point and uninstall them, if I want, without them leaving a trace.</value>
  </data>
  <data name="TechnologyNET" xml:space="preserve">
    <value>I use the .NET Framework to program most of my applications, as I have a lot to do with it at work and therefore I am very familiar with it.</value>
  </data>
  <data name="TechnologyVue" xml:space="preserve">
    <value>Vue.js grew to be my favorite JavaScript framework, as it allows me to build my web applications modularly and according to the MVVM pattern.</value>
  </data>
</root>